{"ast":null,"code":"var _jsxFileName = \"/Users/sg620k/Documents/ngo-connect/src/components/Admin/Admin.tsx\";\nimport React, { Component } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport UploadFile from '../Controls/UploadFile';\nimport xlsx from 'xlsx';\n/* list of supported file types */\n\nconst SupportedFileTypes = ['xlsx', 'xlsb', 'xlsm', 'xls'].map(x => {\n  return '.' + x;\n}).join(',');\n\nclass Admin extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      loading: false\n    };\n    this.handleFile = this.handleFile.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleFile(file) {\n    this.setState({\n      loading: true\n    });\n    /* Boilerplate to set up FileReader */\n\n    const reader = new FileReader();\n    const rABS = !!reader.readAsBinaryString;\n    if (rABS) reader.readAsBinaryString(file);else reader.readAsArrayBuffer(file);\n\n    reader.onload = e => {\n      /* Parse data */\n      const bstr = e && e.target && e.target.result;\n      const wb = xlsx.read(bstr, {\n        type: rABS ? 'binary' : 'array',\n        cellDates: true,\n        cellNF: false,\n        cellText: false,\n        dateNF: 'YYYY-MM-DD'\n      });\n      const inputData = wb.SheetNames.map(sheetName => {\n        const sData = xlsx.utils.sheet_to_json(wb.Sheets[sheetName], {\n          // @shiju - commenting out the line below as it was throwing a type error,\n          // it seems that type of \"cellDates\" argument doesn't exist on the method\n          // cellDates: true,\n          dateNF: 'YYYY-MM-DD'\n        });\n        return {\n          name: sheetName,\n          data: sData\n        };\n      });\n      console.log('To be processed inputData: ', inputData);\n    };\n  }\n\n  handleChange(e) {\n    const files = e.target.files;\n    console.log('Uploaded files:', files);\n    if (files && files[0]) this.handleFile(files[0]);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"m-2 col-md-6 float-right\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(UploadFile, {\n      FileTypes: SupportedFileTypes,\n      handleChange: this.handleChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\nexport default withRouter(Admin);","map":{"version":3,"sources":["/Users/sg620k/Documents/ngo-connect/src/components/Admin/Admin.tsx"],"names":["React","Component","withRouter","UploadFile","xlsx","SupportedFileTypes","map","x","join","Admin","constructor","props","state","loading","handleFile","bind","handleChange","file","setState","reader","FileReader","rABS","readAsBinaryString","readAsArrayBuffer","onload","e","bstr","target","result","wb","read","type","cellDates","cellNF","cellText","dateNF","inputData","SheetNames","sheetName","sData","utils","sheet_to_json","Sheets","name","data","console","log","files","render"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport {withRouter} from 'react-router-dom';\nimport UploadFile from '../Controls/UploadFile';\nimport xlsx from 'xlsx';\n\n/* list of supported file types */\nconst SupportedFileTypes = ['xlsx', 'xlsb', 'xlsm', 'xls']\n  .map((x) => {\n    return '.' + x;\n  })\n  .join(',');\n\nclass Admin extends Component<any, any> {\n  constructor(props) {\n    super(props);\n    this.state = {loading: false};\n    this.handleFile = this.handleFile.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleFile(file) {\n    this.setState({loading: true});\n    /* Boilerplate to set up FileReader */\n    const reader = new FileReader();\n    const rABS = !!reader.readAsBinaryString;\n    if (rABS) reader.readAsBinaryString(file);\n    else reader.readAsArrayBuffer(file);\n    reader.onload = (e) => {\n      /* Parse data */\n      const bstr = e && e.target && e.target.result;\n      const wb = xlsx.read(bstr, {\n        type: rABS ? 'binary' : 'array',\n        cellDates: true,\n        cellNF: false,\n        cellText: false,\n        dateNF: 'YYYY-MM-DD',\n      });\n\n      const inputData = wb.SheetNames.map((sheetName) => {\n        const sData = xlsx.utils.sheet_to_json(wb.Sheets[sheetName], {\n          // @shiju - commenting out the line below as it was throwing a type error,\n          // it seems that type of \"cellDates\" argument doesn't exist on the method\n          // cellDates: true,\n          dateNF: 'YYYY-MM-DD',\n        });\n        return {\n          name: sheetName,\n          data: sData,\n        };\n      });\n\n      console.log('To be processed inputData: ', inputData);\n    };\n  }\n\n  handleChange(e) {\n    const files = e.target.files;\n    console.log('Uploaded files:', files);\n    if (files && files[0]) this.handleFile(files[0]);\n  }\n\n  render() {\n    return (\n      <div className=\"m-2 col-md-6 float-right\">\n        <UploadFile FileTypes={SupportedFileTypes} handleChange={this.handleChange} />\n      </div>\n    );\n  }\n}\n\nexport default withRouter(Admin);\n"]},"metadata":{},"sourceType":"module"}