{"ast":null,"code":"var _jsxFileName = \"/Users/sg620k/Documents/ngo-connect/src/components/AuthenticatedRoute/AuthenticatedRoute.tsx\";\nimport React from 'react';\nimport { Route, Redirect } from 'react-router-dom'; // props will include a `user` object or empty object\n// props will include a `component` as `Component` or a `render`\n// all other props that may be passed in are `..rest`\n\nconst AuthenticatedRoute = ({\n  user,\n  component: Component,\n  render,\n  ...rest\n}) => {\n  // if props include a `user` object and a `render` then create route with `render`\n  if (user && render) {\n    return /*#__PURE__*/React.createElement(Route, Object.assign({}, rest, {\n      render: render,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 12\n      }\n    })); // if props include a `user` object but no `render` then create route with `Component`\n    // if props do not include a `user` object then redirect to home\n  } else {\n    return /*#__PURE__*/React.createElement(Route, Object.assign({}, rest, {\n      render: props => user ? /*#__PURE__*/React.createElement(Component, Object.assign({}, props, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 24,\n          columnNumber: 34\n        }\n      })) : /*#__PURE__*/React.createElement(Redirect, {\n        to: \"/\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 24,\n          columnNumber: 61\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 7\n      }\n    }));\n  }\n};\n\nexport default AuthenticatedRoute;","map":{"version":3,"sources":["/Users/sg620k/Documents/ngo-connect/src/components/AuthenticatedRoute/AuthenticatedRoute.tsx"],"names":["React","Route","Redirect","AuthenticatedRoute","user","component","Component","render","rest","props"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,KAAR,EAAeC,QAAf,QAA8B,kBAA9B,C,CAEA;AACA;AACA;;AAOA,MAAMC,kBAAkB,GAAG,CAAC;AAACC,EAAAA,IAAD;AAAOC,EAAAA,SAAS,EAAEC,SAAlB;AAA6BC,EAAAA,MAA7B;AAAqC,KAAGC;AAAxC,CAAD,KAA2D;AACpF;AACA,MAAIJ,IAAI,IAAIG,MAAZ,EAAoB;AAClB,wBAAO,oBAAC,KAAD,oBAAWC,IAAX;AAAiB,MAAA,MAAM,EAAED,MAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAP,CADkB,CAGlB;AACA;AACD,GALD,MAKO;AACL,wBACE,oBAAC,KAAD,oBACMC,IADN;AAEE,MAAA,MAAM,EAAEC,KAAK,IAAKL,IAAI,gBAAG,oBAAC,SAAD,oBAAeK,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAH,gBAA8B,oBAAC,QAAD;AAAU,QAAA,EAAE,EAAC,GAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OADF;AAMD;AACF,CAfD;;AAiBA,eAAeN,kBAAf","sourcesContent":["import React from 'react';\nimport {Route, Redirect} from 'react-router-dom';\n\n// props will include a `user` object or empty object\n// props will include a `component` as `Component` or a `render`\n// all other props that may be passed in are `..rest`\ninterface IProps {\n  user: any;\n  render: any;\n  [x: string]: any;\n}\n\nconst AuthenticatedRoute = ({user, component: Component, render, ...rest}: IProps) => {\n  // if props include a `user` object and a `render` then create route with `render`\n  if (user && render) {\n    return <Route {...rest} render={render} />;\n\n    // if props include a `user` object but no `render` then create route with `Component`\n    // if props do not include a `user` object then redirect to home\n  } else {\n    return (\n      <Route\n        {...rest}\n        render={props => (user ? <Component {...props} /> : <Redirect to=\"/\" />)}\n      />\n    );\n  }\n};\n\nexport default AuthenticatedRoute;\n"]},"metadata":{},"sourceType":"module"}